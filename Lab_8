/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int m = 0; // Lee el botón
int modo = 0; // Elige el modo
int contador = 0;
int estadoMas = 1;
int estadoMasAntes = 1;
int estadoMenos = 0;
int estadoMenosAntes = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
void mostrarDecena(int num);
void mostrarBinario(int n);
void delay(int t);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  m= HAL_GPIO_ReadPin(BTN_modo_GPIO_Port, BTN_modo_Pin); //Lee el botón de modo
	  HAL_Delay(100);//Delay de anti-rebote
	  switch (m) {
		case 0: // Si no se apacha el botón, el modo se queda igual
			modo = modo;
			break;
		case 1: // Si se apacha el botón, el modo cambia
			if (modo == 1) { // Si está en modo binario, pasa a decena
				modo = 0;
				break;
			}
			if (modo == 0) { // Si está en modo decena, pasa a binario
				modo = 1;
				break;
			}
		default:
			break;
	}
	switch (modo) {
		case 0: // modo decena
			estadoMas = HAL_GPIO_ReadPin(BTN_mas_GPIO_Port, BTN_mas_Pin); // Lee el botón más
			if (estadoMas != estadoMasAntes) {
				if (estadoMas == 0){ //Verifica que el botón se presionó
					contador = (contador+1)%5; // Incrementa y vuelve a 0 después de 4
					mostrarDecena(contador); // Función que actualiza las leds
				}
				estadoMasAntes = estadoMas;
			}
			estadoMenos = HAL_GPIO_ReadPin(BTN_menos_GPIO_Port, BTN_menos_Pin); // Lee el botón más
			if (estadoMenos != estadoMenosAntes) {
				if (estadoMenos == 1) { //Verifica que el botón se presionó
					contador = (contador-1); // Decrementa y vuelve a 0 después de 4
					if (contador == -1) {
						contador = 4;
					}
					mostrarDecena(contador); // Función que actualiza las leds
				}
				estadoMenosAntes = estadoMenos;
			}
			break;
		case 1: // modo binario
			estadoMas = HAL_GPIO_ReadPin(BTN_mas_GPIO_Port, BTN_mas_Pin); // Lee el botón más
			if (estadoMas != estadoMasAntes) {
				if (estadoMas == 0){ //Verifica que el botón se presionó
					contador = (contador+1) % 16; // Incrementa y vuelve a 0 después de 4
					mostrarBinario(contador); // Función que actualiza las leds
				}
				estadoMasAntes = estadoMas;
			}
			estadoMenos = HAL_GPIO_ReadPin(BTN_menos_GPIO_Port, BTN_menos_Pin); // Lee el botón más
			if (estadoMenos != estadoMenosAntes) {
				if (estadoMenos == 1) { //Verifica que el botón se presionó
					contador = (contador-1); // Decrementa y vuelve a 0 después de 4
					if (contador == -1) {
						contador = 15;
					}
					mostrarBinario(contador); // Función que actualiza las leds
				}
				estadoMenosAntes = estadoMenos;
			}
			break;
		default:
			break;
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led4_Pin|led3_Pin|led1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : led4_Pin led3_Pin led1_Pin */
  GPIO_InitStruct.Pin = led4_Pin|led3_Pin|led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : BTN_modo_Pin */
  GPIO_InitStruct.Pin = BTN_modo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN_modo_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BTN_mas_Pin */
  GPIO_InitStruct.Pin = BTN_mas_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BTN_mas_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BTN_menos_Pin */
  GPIO_InitStruct.Pin = BTN_menos_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(BTN_menos_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void mostrarDecena(int num){
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, 0);
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, 0);
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, 0);
			HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, 0);
			break;
		case 1:
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, 1);
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, 0);
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, 0);
			HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, 0);
			break;
		case 2:
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, 0);
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, 1);
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, 0);
			HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, 0);
			break;
		case 3:
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, 0);
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, 0);
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, 1);
			HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, 0);
			break;
		case 4:
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, 0);
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, 0);
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, 0);
			HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, 1);
			break;
		default:
			break;
	}
}

void mostrarBinario(int n){
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, n & 0x001);
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, (n >> 1) & 0x001);
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, (n >> 2) & 0x001);
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, (n >> 3) & 0x001);
}

void delay(int t) {
	for (int var = 0; var < t; ++var) {
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
